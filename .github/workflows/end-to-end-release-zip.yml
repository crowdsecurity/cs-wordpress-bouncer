name: End-to-end release test
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  schedule:
    - cron: '25 08 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: Debug with tmate
        default: false
      check_head_zip:
        type: boolean
        description: Use expected ZIP on HEAD sources
        default: false

permissions:
  contents: read

jobs:
  end-to-end-release-zip-test:
    strategy:
      fail-fast: false
      matrix:
        wp-version: [ "4.9", "5.0", "5.1", "5.2", "5.3", "5.4", "5.5", "5.6", "5.7", "5.8", "5.9", "6.0", "6.1" ]
        php-version: [ "7.2", "7.4", "8.0" ]
        exclude:
          - { php-version: "7.4", wp-version: "4.9" }
          - { php-version: "7.4", wp-version: "5.0" }
          - { php-version: "7.4", wp-version: "5.1" }
          - { php-version: "7.4", wp-version: "5.2" }
          - { php-version: "8.0", wp-version: "4.9" }
          - { php-version: "8.0", wp-version: "5.0" }
          - { php-version: "8.0", wp-version: "5.1" }
          - { php-version: "8.0", wp-version: "5.2" }
          - { php-version: "8.0", wp-version: "5.3" }
          - { php-version: "8.0", wp-version: "5.4" }
          - { php-version: "8.0", wp-version: "5.5" }

    name: End-to-end test suite
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(') }}

    env:
      EXTENSION_NAME: "CrowdSec_Bouncer"
      EXTENSION_PATH: "crowdsec-bouncer"
      ORIGIN: "https://github.com/crowdsecurity/cs-wordpress-bouncer"

    steps:

      - name: Clone DDEV files
        uses: actions/checkout@v3
        with:
          path: .ddev
          repository: julienloizelet/ddev-wp

      - name: Install DDEV
        env:
          DDEV_VERSION: v1.21.4
        run: |
          # @see https://ddev.readthedocs.io/en/stable/#installationupgrade-script-linux-and-macos-armarm64-and-amd64-architectures
          sudo apt-get -qq update
          sudo apt-get -qq -y install libnss3-tools
          curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh
          bash install_ddev.sh ${{ env.DDEV_VERSION }}
          ddev config global --instrumentation-opt-in=false --omit-containers=dba,ddev-ssh-agent
          rm install_ddev.sh

      - name: Set WP_VERSION_CODE env
        # used in some directory path and conventional file naming
        # Example : 5.6.5 => wp565
        run: |
          echo "WP_VERSION_CODE=$(echo wp${{ matrix.wp-version }} | sed 's/\.//g' )" >> $GITHUB_ENV

      - name: Start DDEV for ${{ matrix.wp-version }} with PHP ${{ matrix.php-version }}
        run: |
          cp .ddev/config_overrides/config.${{ env.WP_VERSION_CODE }}.yaml .ddev/config.${{ env.WP_VERSION_CODE }}.yaml
          cp .ddev/additional_docker_compose/docker-compose.crowdsec-without-plugin.yaml .ddev/docker-compose.crowdsec.yaml
          cp .ddev/additional_docker_compose/docker-compose.playwright.yaml .ddev/docker-compose.playwright.yaml
          sed -i -e 's/^php_version:.*/php_version: ${{ matrix.php-version }}/g' .ddev/config.${{ env.WP_VERSION_CODE }}.yaml
          mkdir -p wp-content/plugins
          mkdir -p my-own-modules/${{ env.EXTENSION_PATH }}
          ddev start
          sudo chmod -R 777 ${{ github.workspace }}/wp-content
          sudo chmod -R 777 ${{ github.workspace }}/my-own-modules

      - name: Some DEBUG information
        run: |
          ddev --version
          ddev exec php -v
          ddev exec -s crowdsec crowdsec -version

      - name: Install WordPress ${{ matrix.wp-version }} with PHP ${{ matrix.php-version }}
        run: |
          wget https://wordpress.org/wordpress-${{ matrix.wp-version }}.tar.gz
          tar -xf wordpress-${{ matrix.wp-version }}.tar.gz wordpress
          cp -r wordpress/. ${{ github.workspace }}
          rm -rf wordpress
          rm wordpress-${{ matrix.wp-version }}.tar.gz

      - name: Setup WordPress ${{ matrix.wp-version }} with PHP ${{ matrix.php-version }}
        run: |
          ddev exec wp core install --url='https://${{ env.WP_VERSION_CODE }}.ddev.site' --title='WordPress' --admin_user='admin' --admin_password='admin123' --admin_email='admin@admin.com'

      - name: Clone ${{ env.EXTENSION_NAME }} files
        uses: actions/checkout@v3
        with:
          path: my-own-modules/${{ env.EXTENSION_PATH }}

      - name: Copy only expected zipped files from HEAD
        if: github.event_name == 'push' || github.event.inputs.check_head_zip == 'true'
        run : |
          mkdir wp-content/plugins/crowdsec
          rsync -rc --exclude-from="my-own-modules/${{ env.EXTENSION_PATH }}/.distignore" "my-own-modules/${{ env.EXTENSION_PATH }}/" wp-content/plugins/crowdsec/ --delete --delete-excluded
          ls -al wp-content/plugins/crowdsec

      - name: Retrieve last stable release zip
        if: github.event_name != 'push' && github.event.inputs.check_head_zip != 'true'
        run : |
          LAST_TAG=$(curl -Ls -o /dev/null -w %{url_effective} ${{ env.ORIGIN }}/releases/latest | grep -oP "\/tag\/v\K(.*)$")
          curl -fL https://downloads.wordpress.org/plugin/crowdsec.$LAST_TAG.zip -o crowdsec.$LAST_TAG.zip
          unzip crowdsec.$LAST_TAG.zip -d ${{ github.workspace }}/wp-content/plugins

      - name: Prepare for playwright test
        run: |
          cd ${{ github.workspace }}
          cp .ddev/custom_files/crowdsec/php/cache-actions-from-plugin-folder.php cache-actions.php
          cp -r .ddev/custom_files/crowdsec/cfssl/* wp-content/plugins/crowdsec/tls
          cd wp-content/plugins/crowdsec
          docker cp "tls" ddev-${{ env.WP_VERSION_CODE }}-playwright://var/www/html/wp-content/plugins/crowdsec
          ddev maxmind-download DEFAULT GeoLite2-City /var/www/html/wp-content/plugins/crowdsec/geolocation
          ddev maxmind-download DEFAULT GeoLite2-Country /var/www/html/wp-content/plugins/crowdsec/geolocation
          cd ${{ github.workspace }}/wp-content/plugins/crowdsec/geolocation
          sha256sum -c GeoLite2-Country.tar.gz.sha256.txt
          sha256sum -c GeoLite2-City.tar.gz.sha256.txt
          tar -xf GeoLite2-Country.tar.gz
          tar -xf GeoLite2-City.tar.gz
          rm GeoLite2-Country.tar.gz GeoLite2-Country.tar.gz.sha256.txt GeoLite2-City.tar.gz GeoLite2-City.tar.gz.sha256.txt
          cd ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev/__scripts__
          chmod +x test-init.sh
          ./test-init.sh
          chmod +x run-tests.sh

      - name: Run Plugin activation tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 1-activate-plugin.js

      - name: Configure CrowdSec and Wordpress bouncer plugin
        run: |
          ddev crowdsec-config

      - name: Run Live mode remediation tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 2-live-mode-remediations.js

      - name: Run more Live mode remediation tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 3-live-mode-more.js

      - name: Run Live mode cache tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 4-live-mode-cache.js

      - name: Prepare cron usage
        run: |
          sed -i  's/fastcgi_finish_request/\/\/fastcgi_finish_request/g' wp-cron.php

      - name: Run Stream mode tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 5-stream-mode.js

      - name: Run Redis tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 6-redis.js

      - name: Run Memcached tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 7-memcached.js

      - name: Run Geolocation tests
        uses: ./my-own-modules/crowdsec-bouncer/.github/workflows/end-to-end/run-single-test
        with:
          test_path: ${{ github.workspace }}/my-own-modules/${{ env.EXTENSION_PATH }}/tests/e2e-ddev
          file_path: 8-geolocation.js

      - name: tmate debugging session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 30
        if: failure() && github.event.inputs.debug_enabled == 'true'