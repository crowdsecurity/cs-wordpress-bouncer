name: Unit & integration tests
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-suite:
    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.2','7.3','7.4','8.0','8.1', '8.2']

    name: Unit and integration test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(') }}
    env:
      EXTENSION_PATH: "my-own-modules/remediation-engine"

    steps:
      - name: Clone DDEV files
        uses: actions/checkout@v3
        with:
          path: .ddev
          repository: julienloizelet/ddev-php
          ref: "main"

      - name: Install DDEV
        env:
          DDEV_VERSION: v1.21.4
        run: |
          # @see https://ddev.readthedocs.io/en/stable/#installationupgrade-script-linux-and-macos-armarm64-and-amd64-architectures
          sudo apt-get -qq update
          sudo apt-get -qq -y install libnss3-tools
          curl -LO https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh
          bash install_ddev.sh ${{env.DDEV_VERSION}}
          ddev config global --instrumentation-opt-in=false --omit-containers=dba,ddev-ssh-agent
          rm install_ddev.sh

      - name: Set PHP_VERSION_CODE env
        # used in some directory path and conventional file naming
        # Example : 7.4 => 74
        run: |
           echo "PHP_VERSION_CODE=$(echo php${{ matrix.php-version }} | sed 's/\.//g' )" >> $GITHUB_ENV

      - name: Start DDEV  with PHP ${{ matrix.php-version }}
        run: |
          cp .ddev/config_overrides/config.${{ env.PHP_VERSION_CODE }}.yaml .ddev/config.${{ env.PHP_VERSION_CODE }}.yaml
          ddev start

      - name: Some DEBUG information
        run: |
          ddev --version
          ddev exec php -v

      - name: Clone PHP lib Crowdsec files
        uses: actions/checkout@v3
        with:
          path: ${{env.EXTENSION_PATH}}

      - name: Validate composer.json
        run: | 
          ddev composer validate --strict --working-dir ./${{env.EXTENSION_PATH}}

      - name: Install CrowdSec lib dependencies
        run: |
          ddev composer update --working-dir ./${{env.EXTENSION_PATH}}

      - name: Prepare PHP UNIT tests
        run: |
          ddev maxmind-download DEFAULT GeoLite2-City /var/www/html/${{env.EXTENSION_PATH}}/tests/geolocation
          ddev maxmind-download DEFAULT GeoLite2-Country /var/www/html/${{env.EXTENSION_PATH}}/tests/geolocation
          cd ${{env.EXTENSION_PATH}}/tests/geolocation
          sha256sum -c GeoLite2-Country.tar.gz.sha256.txt
          sha256sum -c GeoLite2-City.tar.gz.sha256.txt
          tar -xf GeoLite2-Country.tar.gz
          tar -xf GeoLite2-City.tar.gz
          rm GeoLite2-Country.tar.gz GeoLite2-Country.tar.gz.sha256.txt GeoLite2-City.tar.gz GeoLite2-City.tar.gz.sha256.txt

      - name: Run Unit tests
        run:  ddev php ./${{env.EXTENSION_PATH}}/vendor/bin/phpunit --debug ./${{env.EXTENSION_PATH}}/tests/Unit --testdox