name: Coding Standards
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      coverage_report:
        type: boolean
        description: Generate PHPUNIT Code Coverage report
        default: false

permissions:
  contents: read

env:
  # Allow ddev get to use a GitHub token to prevent rate limiting by tests
  DDEV_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test-suite:
    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']

    name: Coding standards test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(') }}
    env:
      EXTENSION_PATH: "my-code/remediation-engine"

    steps:
      - name: Install DDEV
        # @see https://ddev.readthedocs.io/en/stable/#installationupgrade-script-linux-and-macos-armarm64-and-amd64-architectures
        run: |
          curl -fsSL https://apt.fury.io/drud/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ddev.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/ddev.gpg] https://apt.fury.io/drud/ * *" | sudo tee /etc/apt/sources.list.d/ddev.list
          sudo apt-get -q update
          sudo apt-get -q -y install libnss3-tools ddev
          mkcert -install
          ddev config global --instrumentation-opt-in=false --omit-containers=dba,ddev-ssh-agent

      - name: Create empty PHP DDEV project
        run: ddev config --project-type=php --project-name=remediation-engine  --php-version=${{ matrix.php-version }}

      - name: Add Redis, Memcached and Crowdsec
        run: |
          ddev get ddev/ddev-redis
          ddev get ddev/ddev-memcached
          # override redis.conf
          ddev get julienloizelet/ddev-tools
          ddev get julienloizelet/ddev-crowdsec-php  

      - name: Start DDEV
        run: |
          ddev start

      - name: Some DEBUG information
        run: |
          ddev --version
          ddev exec php -v

      - name: Clone sources
        uses: actions/checkout@v3
        with:
          path: ${{env.EXTENSION_PATH}}

      - name: Validate composer.json
        run: | 
          ddev composer validate --strict --working-dir ./${{env.EXTENSION_PATH}}

      - name: Install dependencies and Coding standards tools
        run: |
          ddev composer update --working-dir ./${{env.EXTENSION_PATH}}
          ddev composer update --working-dir ./${{env.EXTENSION_PATH}}/tools/coding-standards

      - name: Run PHPCS
        run: ddev phpcs ./${{env.EXTENSION_PATH}}/tools/coding-standards ${{env.EXTENSION_PATH}}/src PSR12

      - name: Run PHPMD
        run: ddev phpmd ./${{env.EXTENSION_PATH}}/tools/coding-standards phpmd/rulesets.xml ../../src

      - name: Run PHPSTAN
        run: ddev phpstan /var/www/html/${{env.EXTENSION_PATH}}/tools/coding-standards phpstan/phpstan.neon /var/www/html/${{env.EXTENSION_PATH}}/src

      - name: Run PSALM
        run: ddev psalm ./${{env.EXTENSION_PATH}}/tools/coding-standards /var/www/html/${{env.EXTENSION_PATH}}/tools/coding-standards/psalm

      - name: Prepare PHP UNIT tests
        if: github.event.inputs.coverage_report == 'true'
        run: |
          ddev maxmind-download DEFAULT GeoLite2-City /var/www/html/${{env.EXTENSION_PATH}}/tests/geolocation
          ddev maxmind-download DEFAULT GeoLite2-Country /var/www/html/${{env.EXTENSION_PATH}}/tests/geolocation
          cd ${{env.EXTENSION_PATH}}/tests/geolocation
          sha256sum -c GeoLite2-Country.tar.gz.sha256.txt
          sha256sum -c GeoLite2-City.tar.gz.sha256.txt
          tar -xf GeoLite2-Country.tar.gz
          tar -xf GeoLite2-City.tar.gz
          rm GeoLite2-Country.tar.gz GeoLite2-Country.tar.gz.sha256.txt GeoLite2-City.tar.gz GeoLite2-City.tar.gz.sha256.txt

      - name: Run PHPUNIT Code Coverage
        if: github.event.inputs.coverage_report == 'true'
        run: |
          ddev xdebug
          ddev php -dxdebug.mode=coverage  ./${{env.EXTENSION_PATH}}/tools/coding-standards/vendor/bin/phpunit --configuration ./${{env.EXTENSION_PATH}}/tools/coding-standards/phpunit/phpunit.xml --coverage-text=./${{env.EXTENSION_PATH}}/coding-standards/phpunit/code-coverage/report.txt
          cat ${{env.EXTENSION_PATH}}/coding-standards/phpunit/code-coverage/report.txt